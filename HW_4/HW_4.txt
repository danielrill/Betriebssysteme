 #HW_4.txt
 
    02.10.2021
    Sebastian Kaeser, Daniel Rill
    BSYS    (AIN3)
    
    OSTEP CHAPTER 4     " The Abstraction: The Process "
    

1. Run process-run.py with the following flags: -l 5:100,5:100.
    What should the CPU utilization be (e.g., the percent of time the
    CPU is in use?) Why do you know this? Use the -c and -p flags to
    see if you were right.
    
Antwort:

    The CPU runs 100 % of the time (no I/O request)
    
    
2. Now run with these flags: ./process-run.py -l 4:100,1:0.
    These flags specify one process with 4 instructions (all to use the
    CPU), and one that simply issues an I/O and waits for it to be done.
    How long does it take to complete both processes? Use -c and -p
    to find out if you were right.
    
Antwort:
   --> Ubuntu LINUX

(v2) % ./process-run.py -c -p -l 4:100,1:0
Time     PID: 0     PID: 1        CPU        IOs 
  1     RUN:cpu      READY          1            
  2     RUN:cpu      READY          1            
  3     RUN:cpu      READY          1            
  4     RUN:cpu      READY          1            
  5        DONE     RUN:io            1            
  6        DONE    WAITING                     1 
  7        DONE    WAITING                     1 
  8        DONE    WAITING                     1 
  9        DONE    WAITING                     1 
 10*      DONE       DONE                       

Stats: Total Time 10
Stats: CPU Busy 5 (50.00%)
Stats: IO Busy  4 (40.00%)

    4(process 0 __no I/0) + 5(process 1 I/0) + 1 = 10

  -->  MAC OS

(v2) @iMac bsys % python process-run.py -c -p -l 4:100,1:0 
Time PID: 0 PID: 1 CPU IOs 
1   RUN:cpu READY 1
2   RUN:cpu READY 1
3   RUN:cpu READY 1
4   RUN:cpu READY 1
5   DONE RUN:io     1
6   DONE WAITING        1 
7   DONE WAITING        1 
8   DONE WAITING        1 
9   DONE WAITING        1 
10  DONE WAITING        1 
11* DONE RUN:io_done 1


Stats: Total Time 11 
Stats: CPU Busy 6 (54.55%) 
Stats: IO Busy 5 (45.45%)

    4(process 0 __no I/0) + 6(process 1 I/0) + 1 = 11
    
    
3. Switch the order of the processes: -l 1:0,4:100. What happens
    now? Does switching the order matter? Why? (As always, use -c
    and -p to see if you were right)
    
Antwort:

    Ubuntu Linux
    
(v2) % ./process-run.py -c -p -l 1:0,4:100
Time     PID: 0     PID: 1        CPU        IOs 
  1      RUN:io      READY             1            
  2     WAITING    RUN:cpu          1          1 
  3     WAITING    RUN:cpu          1          1 
  4     WAITING    RUN:cpu          1          1 
  5     WAITING    RUN:cpu          1          1 
  6*       DONE       DONE                       

Stats: Total Time 6
Stats: CPU Busy 5 (83.33%)
Stats: IO Busy  4 (66.67%)

    

    MAC OS
    
(v2) @iMac bsys % python process-run.py -c -p -l 1:0,4:100 
Time        PID: 0      PID: 1      CPU         IOs 
1           RUN:io        READY     1
2           WAITING     RUN:cpu  1                  1 
3           WAITING     RUN:cpu  1                  1 
4           WAITING     RUN:cpu  1                  1 
5           WAITING     RUN:cpu  1                  1 
6           WAITING     DONE                           1 
7*         RUN:io_done DONE     1


Stats: Total Time 7 
Stats: CPU Busy 6 (85.71%) 
Stats: IO Busy 5 (71.43%)    

    Now Process 1 runs, when process 0 is waiting for I/0 to complete


4. Weâ€™ll now explore some of the other flags. One important flag is
    -S, which determines how the system reacts when a process is-
    sues an I/O. With the flag set to SWITCH ON END, the system
    will NOT switch to another process while one is doing I/O, in-
    stead waiting until the process is completely finished. What hap-
    pens when you run the following two processes (-l 1:0,4:100
    -c -S SWITCH ON END), one doing I/O and the other doing CPU
    work?
    
Antwort:

    Ubuntu Linux
    
(v2) % ./process-run.py -c -p -l 1:0,4:100 -S SWITCH_ON_END
Time     PID: 0     PID: 1        CPU        IOs 
  1      RUN:io      READY          1            
  2     WAITING      READY                     1 
  3     WAITING      READY                     1 
  4     WAITING      READY                     1 
  5     WAITING      READY                     1 
  6*       DONE    RUN:cpu          1            
  7        DONE    RUN:cpu          1            
  8        DONE    RUN:cpu          1            
  9        DONE    RUN:cpu          1            

Stats: Total Time 9
Stats: CPU Busy 5 (55.56%)
Stats: IO Busy  4 (44.44%)

    MAC OS
    
(v2) @iMac bsys % python process-run.py -c -p -l 1:0,4:100 -S SWITCH_ON_END

Time    PID: 0         PID: 1      CPU  IOs 
1       RUN:io          READY               1
2       WAITING       READY               1 
3       WAITING       READY               1 
4       WAITING       READY                1 
5       WAITING       READY                 1 
6       WAITING       READY                 1 
7*      RUN:io_done READY   1
8       DONE        RUN:cpu     1
9       DONE RUN:cpu            1
10      DONE RUN:cpu            1
11      DONE RUN:cpu            1

Stats: Total Time 11 
Stats: CPU Busy 6 (54.55%) 
Stats: IO Busy 5 (45.45%)

    Process 1 stays Ready(does not run) until I/O for Process 0 is done
    
5. Now, run the same processes, but with the switching behavior set
    to switch to another process whenever one is WAITING for I/O (-l
    1:0,4:100 -c -S SWITCH ON IO). What happens now? Use -c
    and -p to confirm that you are right.
    
Antwort:
    
    Ubuntu Linux

(v2) % ./process-run.py -c -p -l 1:0,4:100 -S SWITCH_ON_IO 
Time     PID: 0     PID: 1        CPU        IOs 
  1      RUN:io      READY          1            
  2     WAITING    RUN:cpu          1          1 
  3     WAITING    RUN:cpu          1          1 
  4     WAITING    RUN:cpu          1          1 
  5     WAITING    RUN:cpu          1          1 
  6*       DONE       DONE                       

Stats: Total Time 6
Stats: CPU Busy 5 (83.33%)
Stats: IO Busy  4 (66.67%)

    MAC OS
    
(v2) @iMac bsys % python process-run.py -c -p -l 1:0,4:100 -S SWITCH_ON_IO 

Time     PID: 0         PID: 1      CPU     Os 
1           RUN:io        READY        1
2           WAITING     RUN:cpu     1       1 
3           WAITING     RUN:cpu     1       1 
4           WAITING     RUN:cpu     1       1 
5           WAITING     RUN:cpu     1       1 
6           WAITING     DONE                   1 
7*          RUN:io_done  DONE     1

Stats: Total Time 7 
Stats: CPU Busy 6 (85.71%) 
Stats: IO Busy 5 (71.43%)

    Same results as in 3
     " Now Process 1 runs, when process 0 is waiting for I/0 to complete "
    
 6. One other important behavior is what to do when an I/O com-
    pletes. With -I IO RUN LATER, when an I/O completes, the pro-
    cess that issued it is not necessarily run right away; rather, whatever
    was running at the time keeps running. What happens when you
    run this combination of processes? (Run ./process-run.py -l
    3:0,5:100,5:100,5:100 -S SWITCH ON IO -I IO RUN LATER
    -c -p) Are system resources being effectively utilized?
    
 Antwort:
 
    Ubuntu Linux 
    
(v2) % ./process-run.py -c -p -l 3:0,5:100,5:100,5:100 -S SWITCH_ON_IO -I IO_RUN_LATER  
Time     PID: 0     PID: 1     PID: 2     PID: 3        CPU        IOs 
  1      RUN:io      READY      READY      READY          1            
  2     WAITING    RUN:cpu      READY      READY          1          1 
  3     WAITING    RUN:cpu      READY      READY          1          1 
  4     WAITING    RUN:cpu      READY      READY          1          1 
  5     WAITING    RUN:cpu      READY      READY          1          1 
  6*      READY    RUN:cpu      READY      READY          1            
  7       READY       DONE    RUN:cpu      READY          1            
  8       READY       DONE    RUN:cpu      READY          1            
  9       READY       DONE    RUN:cpu      READY          1            
 10       READY       DONE    RUN:cpu      READY          1            
 11       READY       DONE    RUN:cpu      READY          1            
 12       READY       DONE       DONE    RUN:cpu          1            
 13       READY       DONE       DONE    RUN:cpu          1            
 14       READY       DONE       DONE    RUN:cpu          1            
 15       READY       DONE       DONE    RUN:cpu          1            
 16       READY       DONE       DONE    RUN:cpu          1            
 17      RUN:io       DONE       DONE       DONE          1            
 18     WAITING       DONE       DONE       DONE                     1 
 19     WAITING       DONE       DONE       DONE                     1 
 20     WAITING       DONE       DONE       DONE                     1 
 21     WAITING       DONE       DONE       DONE                     1 
 22*     RUN:io       DONE       DONE       DONE          1            
 23     WAITING       DONE       DONE       DONE                     1 
 24     WAITING       DONE       DONE       DONE                     1 
 25     WAITING       DONE       DONE       DONE                     1 
 26     WAITING       DONE       DONE       DONE                     1 
 27*       DONE       DONE       DONE       DONE                       

Stats: Total Time 27
Stats: CPU Busy 18 (66.67%)
Stats: IO Busy  12 (44.44%)

    MAC OS
    
(v2) @iMac bsys % python process-run.py -l 3:0,5:100,5:100,5:100 -S SWITCH_ON_IO -I IO_RUN_LATER -c -p 

Time    PID: 0          PID: 1        PID: 2       PID: 3      CPU      IOs 
1           RUN:io    READY     READY     READY     1 
2           WAITING RUN:cpu  READY      READY    1              1 
3           WAITING RUN:cpu  READY      READY    1               1 
4           WAITING RUN:cpu  READY      READY    1               1 
5           WAITING RUN:cpu  READY      READY    1               1 
6           WAITING RUN:cpu  READY      READY   1                  1 
7*          READY    DONE       RUN:cpu  READY  1 
8           READY     DONE      RUN:cpu   READY 1 
9           READY     DONE      RUN:cpu   READY 1 
10          READY   DONE        RUN:cpu  READY 1 
11          READY DONE          RUN:cpu  READY 1 
12          READY DONE          DONE       RUN:cpu 1 
13          READY DONE          DONE       RUN:cpu 1 
14          READY DONE          DONE       RUN:cpu 1 
15          READY DONE          DONE        RUN:cpu 1 
16          READY DONE          DONE        RUN:cpu 1 
17          RUN:io_doneDONE DONE        DONE        1 
18          RUN:io DONE         DONE        DONE                             1 
19          WAITING DONE      DONE          DONE                            1 
20          WAITING DONE        DONE        DONE                            1 
21          WAITING DONE        DONE        DONE                            1 
22          WAITING DONE        DONE        DONE                            1 
23          WAITING DONE        DONE        DONE                            1 
24*         RUN:io_doneDONE  DONE       DONE        1 
25          RUN:io DONE            DONE         DONE    1 
26          WAITING DONE        DONE            DONE                        1 
27          WAITING DONE         DONE           DONE                        1 
28          WAITING DONE        DONE            DONE                        1 
29          WAITING DONE        DONE            DONE                        1 
30          WAITING DONE        DONE            DONE                        1 
31*         RUN:io_done DONE DONE           DONE    1 

Stats: Total Time 31 
Stats: CPU Busy 21 (67.74%) 
Stats: IO Busy 15 (48.39%)

    Process 0 runs the first I/O and then waits for the other Processes 1-3 to be done
    until it does the remaining I/O's

    
7. Now run the same processes, but with -I IO RUN IMMEDIATE set,
    which immediately runs the process that issued the I/O. How does
    this behavior differ? Why might running a process that just com-
    pleted an I/O again be a good idea?
    
Antwort:

      Ubuntu Linux 
  
(v2) % ./process-run.py -c -p -l 3:0,5:100,5:100,5:100 -S SWITCH_ON_IO -I IO_RUN_IMMEDIATE 
Time     PID: 0     PID: 1     PID: 2     PID: 3        CPU        IOs 
  1      RUN:io      READY      READY      READY          1            
  2     WAITING    RUN:cpu      READY      READY          1          1 
  3     WAITING    RUN:cpu      READY      READY          1          1 
  4     WAITING    RUN:cpu      READY      READY          1          1 
  5     WAITING    RUN:cpu      READY      READY          1          1 
  6*     RUN:io      READY      READY      READY          1            
  7     WAITING    RUN:cpu      READY      READY          1          1 
  8     WAITING       DONE    RUN:cpu      READY          1          1 
  9     WAITING       DONE    RUN:cpu      READY          1          1 
 10     WAITING       DONE    RUN:cpu      READY          1          1 
 11*     RUN:io       DONE      READY      READY          1            
 12     WAITING       DONE    RUN:cpu      READY          1          1 
 13     WAITING       DONE    RUN:cpu      READY          1          1 
 14     WAITING       DONE       DONE    RUN:cpu          1          1 
 15     WAITING       DONE       DONE    RUN:cpu          1          1 
 16*       DONE       DONE       DONE    RUN:cpu          1            
 17        DONE       DONE       DONE    RUN:cpu          1            
 18        DONE       DONE       DONE    RUN:cpu          1            

Stats: Total Time 18
Stats: CPU Busy 18 (100.00%)
Stats: IO Busy  12 (66.67%)


    MAC OS
    
@iMac bsys % python3 process-run.py -l 3:0,5:100,5:100,5:100 -S SWITCH_ON_IO -I IO_RUN_IMMEDIATE -c -p
Time        PID: 0        PID: 1        PID: 2        PID: 3           CPU           IOs
  1         RUN:io         READY         READY         READY             1
  2        WAITING       RUN:cpu         READY         READY             1             1
  3        WAITING       RUN:cpu         READY         READY             1             1
  4        WAITING       RUN:cpu         READY         READY             1             1
  5        WAITING       RUN:cpu         READY         READY             1             1
  6        WAITING       RUN:cpu         READY         READY             1             1
  7*   RUN:io_done          DONE         READY         READY             1
  8         RUN:io          DONE         READY         READY             1
  9        WAITING          DONE       RUN:cpu         READY             1             1
 10        WAITING          DONE       RUN:cpu         READY             1             1
 11        WAITING          DONE       RUN:cpu         READY             1             1
 12        WAITING          DONE       RUN:cpu         READY             1             1
 13        WAITING          DONE       RUN:cpu         READY             1             1
 14*   RUN:io_done          DONE          DONE         READY             1
 15         RUN:io          DONE          DONE         READY             1
 16        WAITING          DONE          DONE       RUN:cpu             1             1
 17        WAITING          DONE          DONE       RUN:cpu             1             1
 18        WAITING          DONE          DONE       RUN:cpu             1             1
 19        WAITING          DONE          DONE       RUN:cpu             1             1
 20        WAITING          DONE          DONE       RUN:cpu             1             1
 21*   RUN:io_done          DONE          DONE          DONE             1

Stats: Total Time 21
Stats: CPU Busy 21 (100.00%)
Stats: IO Busy  15 (71.43%)

    Now the I/O process 0 runs in between
    (the other processes run when process 0 is waiting)
    
    This Scheduling is more Fair and reduces the overall response time
    Also the CPU runs now 100% (perfect ? distribution)


8. Now run with some randomly generated processes: -s 1 -l 3:50,3:50
    or -s 2 -l 3:50,3:50 or -s 3 -l 3:50,3:50. See if you can
    predict how the trace will turn out. What happens when you use
    the flag -I IO RUN IMMEDIATE vs. -I IO RUN LATER? What hap-
    pens when you use -S SWITCH ON IO vs. -S SWITCH ON END?
    
Antwort:

    Ubuntu LINUX
    
    
    -I IO RUN IMMEDIATE 
    
Time     PID: 0     PID: 1        CPU        IOs 
  1     RUN:cpu      READY          1            
  2      RUN:io      READY          1            
  3     WAITING    RUN:cpu          1          1 
  4     WAITING    RUN:cpu          1          1 
  5     WAITING    RUN:cpu          1          1 
  6     WAITING       DONE                     1 
  7*     RUN:io       DONE          1            
  8     WAITING       DONE                     1 
  9     WAITING       DONE                     1 
 10     WAITING       DONE                     1 
 11     WAITING       DONE                     1 
 12*       DONE       DONE                       

Stats: Total Time 12
Stats: CPU Busy 6 (50.00%)
Stats: IO Busy  8 (66.67%)

     -I IO RUN LATER
     
(v2) % ./process-run.py -c -p -s 1 -l 3:50,3:50 -I IO_RUN_LATER   
Time     PID: 0     PID: 1        CPU        IOs 
  1     RUN:cpu      READY          1            
  2      RUN:io      READY          1            
  3     WAITING    RUN:cpu          1          1 
  4     WAITING    RUN:cpu          1          1 
  5     WAITING    RUN:cpu          1          1 
  6     WAITING       DONE                     1 
  7*     RUN:io       DONE          1            
  8     WAITING       DONE                     1 
  9     WAITING       DONE                     1 
 10     WAITING       DONE                     1 
 11     WAITING       DONE                     1 
 12*       DONE       DONE                       

Stats: Total Time 12
Stats: CPU Busy 6 (50.00%)
Stats: IO Busy  8 (66.67%)
    
     -S SWITCH ON IO 
     
(v2) % ./process-run.py -c -p -s 1 -l 3:50,3:50 -S SWITCH_ON_IO
Time     PID: 0     PID: 1        CPU        IOs 
  1     RUN:cpu      READY          1            
  2      RUN:io      READY          1            
  3     WAITING    RUN:cpu          1          1 
  4     WAITING    RUN:cpu          1          1 
  5     WAITING    RUN:cpu          1          1 
  6     WAITING       DONE                     1 
  7*     RUN:io       DONE          1            
  8     WAITING       DONE                     1 
  9     WAITING       DONE                     1 
 10     WAITING       DONE                     1 
 11     WAITING       DONE                     1 
 12*       DONE       DONE                       

Stats: Total Time 12
Stats: CPU Busy 6 (50.00%)
Stats: IO Busy  8 (66.67%)
     
     
     -S SWITCH ON END
     
(v2) % ./process-run.py -c -p -s 1 -l 3:50,3:50 -S SWITCH_ON_END
Time     PID: 0     PID: 1        CPU        IOs 
  1     RUN:cpu      READY          1            
  2      RUN:io      READY          1            
  3     WAITING      READY                     1 
  4     WAITING      READY                     1 
  5     WAITING      READY                     1 
  6     WAITING      READY                     1 
  7*     RUN:io      READY          1            
  8     WAITING      READY                     1 
  9     WAITING      READY                     1 
 10     WAITING      READY                     1 
 11     WAITING      READY                     1 
 12*       DONE    RUN:cpu          1            
 13        DONE    RUN:cpu          1            
 14        DONE    RUN:cpu          1            

Stats: Total Time 14
Stats: CPU Busy 6 (42.86%)
Stats: IO Busy  8 (57.14%)

    MAC OS
    
    @iMac bsys % python3 process-run.py -c -p -s 1 -l 3:50,3:50 -I IO_RUN_LATER -S SWITCH_ON_IO
Time        PID: 0        PID: 1           CPU           IOs
  1        RUN:cpu         READY             1
  2         RUN:io         READY             1
  3        WAITING       RUN:cpu             1             1
  4        WAITING       RUN:cpu             1             1
  5        WAITING       RUN:cpu             1             1
  6        WAITING          DONE                           1
  7        WAITING          DONE                           1
  8*   RUN:io_done          DONE             1
  9         RUN:io          DONE             1
 10        WAITING          DONE                           1
 11        WAITING          DONE                           1
 12        WAITING          DONE                           1
 13        WAITING          DONE                           1
 14        WAITING          DONE                           1
 15*   RUN:io_done          DONE             1

Stats: Total Time 15
Stats: CPU Busy 8 (53.33%)
Stats: IO Busy  10 (66.67%)

@iMac bsys % python3 process-run.py -c -p -s 1 -l 3:50,3:50 -I IO_RUN_LATER -S SWITCH_ON_END
Time        PID: 0        PID: 1           CPU           IOs
  1        RUN:cpu         READY             1
  2         RUN:io         READY             1
  3        WAITING         READY                           1
  4        WAITING         READY                           1
  5        WAITING         READY                           1
  6        WAITING         READY                           1
  7        WAITING         READY                           1
  8*   RUN:io_done         READY             1
  9         RUN:io         READY             1
 10        WAITING         READY                           1
 11        WAITING         READY                           1
 12        WAITING         READY                           1
 13        WAITING         READY                           1
 14        WAITING         READY                           1
 15*   RUN:io_done         READY             1
 16           DONE       RUN:cpu             1
 17           DONE       RUN:cpu             1
 18           DONE       RUN:cpu             1

Stats: Total Time 18
Stats: CPU Busy 8 (44.44%)
Stats: IO Busy  10 (55.56%)


    Regardles If we RUN_IO_LATER or RUN_IO_IMMEDIATE
    the trace and overall response time are exactly the same
    
    The only difference between the traces is, when we use the SWITCH_ON_END flag
    which lets the I/O process finish completly and keeps the other process1 on ready
    
    
