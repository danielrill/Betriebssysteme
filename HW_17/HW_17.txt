
 #HW_17.txt
 
    02.10.2021
    Sebastian Kaeser, Daniel Rill
    BSYS    (AIN3)
    
    OSTEP CHAPTER 17     " FREE SPACE "




1. First run with the flags-n10-H0-pBEST-s0to gener- ate a few random allocations and frees. Can you predict what al- loc()/free() will return? Can you guess the state of the free list after each request? What do you notice about the free list over time?



seed 1
size 100
baseAddr 1000
headerSize 0
alignment -1
policy BEST
listOrder ADDRSORT
coalesce False
numOps 10
range 10
percentAlloc 50
allocList 
compute False

ptr[0] = Alloc(9) returned ?
List? 

==>[addr: 1009, sz: 91]

Free(ptr[0])
returned ?
List? 

==>[addr:1000, sz: 9],[addr:1009,sz:91]

ptr[1] = Alloc(5) returned ?
List? 

==>[addr:1005,size: 4],[addr:1009,sz:91]

Free(ptr[1])
returned ?
List? 


==>[addr:1000,size: 5],[addr:1005,size:4],[addr:1009,size:91]

ptr[2] = Alloc(1) returned ?
List? 

==>[addr:1000,size:5],[addr:1006,size:3],[addr:1009,size:91]

Free(ptr[2])
returned ?
List? 

==>[addr:1000,size:5],[addr:1005,size:1],[addr:1006,size:3],[addr:1009,size:91]

ptr[3] = Alloc(5) returned ?
List? 

==>[addr:1005,size:1],[addr:1006,size:3],[addr:1009,size:91]

Free(ptr[3])
returned ?
List? 

==>[addr:1000,size:5],[addr:1005,size:1],[addr:1006,size:3],[addr:1009,size:91]


ptr[4] = Alloc(1) returned ?
List? 

==>[addr:1000,size:5],[addr:1006,size:3],[addr:1009,size:91]

Free(ptr[4])
returned ?
List? 

==>[addr:1000,size:5],[addr:1005,size:1],[addr:1006,size:3],[addr:1009,size:91]






How are the results different when using a WORST fit policy to search the free list (-p WORST)? What changes?

i./malloc.py -n 10 -H 0 -p WORST -s 1 -c                                              ✔ │ 16:28:05 
seed 1
size 100
baseAddr 1000
headerSize 0
alignment -1
policy WORST
listOrder ADDRSORT
coalesce False
numOps 10
range 10
percentAlloc 50
allocList 
compute True

ptr[0] = Alloc(9) returned 1000 (searched 1 elements)
Free List [ Size 1 ]: [ addr:1009 sz:91 ]

Free(ptr[0])
returned 0
Free List [ Size 2 ]: [ addr:1000 sz:9 ][ addr:1009 sz:91 ]

ptr[1] = Alloc(5) returned 1009 (searched 2 elements)
Free List [ Size 2 ]: [ addr:1000 sz:9 ][ addr:1014 sz:86 ]

Free(ptr[1])
returned 0
Free List [ Size 3 ]: [ addr:1000 sz:9 ][ addr:1009 sz:5 ][ addr:1014 sz:86 ]

ptr[2] = Alloc(1) returned 1014 (searched 3 elements)
Free List [ Size 3 ]: [ addr:1000 sz:9 ][ addr:1009 sz:5 ][ addr:1015 sz:85 ]

Free(ptr[2])
returned 0
Free List [ Size 4 ]: [ addr:1000 sz:9 ][ addr:1009 sz:5 ][ addr:1014 sz:1 ][ addr:1015 sz:85 ]

ptr[3] = Alloc(5) returned 1015 (searched 4 elements)
Free List [ Size 4 ]: [ addr:1000 sz:9 ][ addr:1009 sz:5 ][ addr:1014 sz:1 ][ addr:1020 sz:80 ]

Free(ptr[3])
returned 0
Free List [ Size 5 ]: [ addr:1000 sz:9 ][ addr:1009 sz:5 ][ addr:1014 sz:1 ][ addr:1015 sz:5 ][ addr:1020 sz:80 ]

ptr[4] = Alloc(1) returned 1020 (searched 5 elements)
Free List [ Size 5 ]: [ addr:1000 sz:9 ][ addr:1009 sz:5 ][ addr:1014 sz:1 ][ addr:1015 sz:5 ][ addr:1021 sz:79 ]

Free(ptr[4])
returned 0
Free List [ Size 6 ]: [ addr:1000 sz:9 ][ addr:1009 sz:5 ][ addr:1014 sz:1 ][ addr:1015 sz:5 ][ addr:1020 sz:1 ][ addr:1021 sz:79 ]


==> The List gets bigger because worst fit tends to use up the bigger chunk of memory, in this case it uses up the entire size
==> If the size of the list is used up only then worst fit will use the fragmented memory chunks (biggest fragments)





What about when using FIRST fit (-p FIRST)? What speeds up when you use first fit?


./malloc.py -n 10 -H 0 -p FIRST -s 1 -c                                              ✔ │ 16:29:35
seed 1
size 100
baseAddr 1000
headerSize 0
alignment -1
policy FIRST
listOrder ADDRSORT
coalesce False
numOps 10
range 10
percentAlloc 50
allocList
compute True

ptr[0] = Alloc(9) returned 1000 (searched 1 elements)
Free List [ Size 1 ]: [ addr:1009 sz:91 ]

Free(ptr[0])
returned 0
Free List [ Size 2 ]: [ addr:1000 sz:9 ][ addr:1009 sz:91 ]

ptr[1] = Alloc(5) returned 1000 (searched 1 elements)
Free List [ Size 2 ]: [ addr:1005 sz:4 ][ addr:1009 sz:91 ]

Free(ptr[1])
returned 0
Free List [ Size 3 ]: [ addr:1000 sz:5 ][ addr:1005 sz:4 ][ addr:1009 sz:91 ]

ptr[2] = Alloc(1) returned 1000 (searched 1 elements)
Free List [ Size 3 ]: [ addr:1001 sz:4 ][ addr:1005 sz:4 ][ addr:1009 sz:91 ]

Free(ptr[2])
returned 0
Free List [ Size 4 ]: [ addr:1000 sz:1 ][ addr:1001 sz:4 ][ addr:1005 sz:4 ][ addr:1009 sz:91 ]

ptr[3] = Alloc(5) returned 1009 (searched 4 elements)
                                          ^
Free List [ Size 4 ]: [ addr:1000 sz:1 ][ addr:1001 sz:4 ][ addr:1005 sz:4 ][ addr:1014 sz:86 ]

Free(ptr[3])
returned 0
Free List [ Size 5 ]: [ addr:1000 sz:1 ][ addr:1001 sz:4 ][ addr:1005 sz:4 ][ addr:1009 sz:5 ][ addr:1014 sz:86 ]

ptr[4] = Alloc(1) returned 1000 (searched 1 elements)
                                          ^
Free List [ Size 4 ]: [ addr:1001 sz:4 ][ addr:1005 sz:4 ][ addr:1009 sz:5 ][ addr:1014 sz:86 ]

Free(ptr[4])
returned 0
Free List [ Size 5 ]: [ addr:1000 sz:1 ][ addr:1001 sz:4 ][ addr:1005 sz:4 ][ addr:1009 sz:5 ][ addr:1014 sz:86 ]
                                     ^


WORST-FIT


ptr[4] = Alloc(1) returned 1020 (searched 5 elements)
                                          ^ 
Free List [ Size 5 ]: [ addr:1000 sz:9 ][ addr:1009 sz:5 ][ addr:1014 sz:1 ][ addr:1015 sz:5 ][ addr:1021 sz:79 ]


==> The strength of FIRST-FIT allows us to traverse the chunks more efficently, is does not necasserily go through the entire list, it rather uses up the first free fitting chunk of memory. FIRST-FIT has a worst case O(n) of n, WORST FIT and BEST FIT have a best Case O(n) of n.
==> FIRST FIT is better for very fragmented chunks















4. For the above questions, how the list is kept ordered can affect the time it takes to find a free location for some of the policies. Use the different free list orderings (-l ADDRSORT, -l SIZESORT+, -l SIZESORT-) to see how the policies and the list orderings in- teract.


           | ADDRSORT | SIZESORT+ | SIZESORT- |
BESTSORT       O(n)      O(n)         O(n)
WORSTSORT      O(n)      O(n)         O(n)
FIRSTSORT      <O(n)     <O(n)        O(1)


==> FIRST-FIT is the best choice in therms of performance because it does not traverse the entire list, especially if the adresses are sorted descending






5. Coalescing of a freelist canbequiteimportant.Increasethenumber of random allocations (say to -n 1000). What happens to larger allocation requests over time? Run with and without coalescing (i.e., without and with the -C flag). What differences in outcome do you see? How big is the free list over time in each case? Does the ordering of the list matter in this case?


==> Merging the free-list is insanely important for many allocations, it does not fragment the list so extremly
==> All policies benefit by merging the list
==> If we use an Ordering of the free list, things look very different 
 ==> In a descending Order FIRST-FIT tends to fragementize our memory in very very little (eg.1 bytes) memory chunks. (Always grabs the first big chunk)
 ==> In a ascending Order FIRST-FIT is much more performant and we dont get so many seperated chunks 
 ==> In ADDRSORT FIRST-FIT is also much more performant (Doesent traverse the list so often)

==> FIRST-FIT + SIZESORT- == bad for memory and performance
==> FIRST-FIT + SIZESORT+ == medium for memory and performance (10/100)
==> FIRST-FIT + ADDRSORT == best for memory and performance (1/100)


==>BEST-FIT + SIZESORT- == bad for memory and performance (Still better than FIRST-FIT)
==>BEST-FIT + SIZESORT+ == medium for memory and performance (10/100) (Equal to FIRST-FIT)
==>BEST-FIT + ADDRSORT == best for memory and performance (1/100) (Equal to FIRST-FIT)


==>WORST-FIT + SIZESORT- == very very bad for memory and performance (36/100)
==>WORST-FIT + SIZESORT+ == very very bad for memory and performance (36/100) 
==>WORST-FIT + ADDRSORT == best for memory and performance (2/100) (worse than  FIRST-FIT, BEST-FIT)

==> ADDR-SORT is better for many allocations for all policies







6. What happens when you change the percent allocated fraction -P to higher than 50? What happens to allocations as it nears 100? What about as the percent nears 0?


==> At a high probability the risk of using up the entire memory chunk is extremly high, thus we can not allocate more dynamic memory
==> At a low probability we always are able to allocate new dynamic memory, because of the many frees




7. What kind of specific requests can you make to generate a highly- fragmented free space? Use the -A flag to create fragmented free lists, and see how different policies and options change the organi- zation of the free list.




./malloc.py -n 100 -H 0 -p BEST -P 1 -s 1  -A +10,+10,+10,+10,+10,+10,+10,+10,+10,+10,-0,-1,-2,-3,-4,-5,-6,-7,-8,-9 -c


Free(ptr[9])
returned 0
Free List [ Size 10 ]: [ addr:1000 sz:10 ][ addr:1010 sz:10 ][ addr:1020 sz:10 ][ addr:1030 sz:10 ][ addr:1040 sz:10 ][ addr:1050 sz:10 ][ addr:1060 sz:10 ][ addr:1070 sz:10 ][ addr:1080 sz:10 ][ addr:1090 sz:10 ]


==> If we free the memory at the end of all allocs regardless of the policy, we get a fragmented space 

./malloc.py -n 100 -H 0 -p BEST -P 1 -s 1  -A +10,-0,+10,-1,+10,-2,+10,-3 -c

==> If use always the same size and free it immediatly FIRST-FIT and BEST-FIT do not fragment the space but WORST-FIT does


WORST => Free(ptr[3])
returned 0
Free List [ Size 5 ]: [ addr:1000 sz:10 ][ addr:1010 sz:10 ][ addr:1020 sz:10 ][ addr:1030 sz:10 ][ addr:1040 sz:60 ]


==> In Ascending Order all policies perform the same

./malloc.py -n 100 -H 0 -p FIRST -P 1 -s 1  -A +10,-0,+20,-1,+30,-2,+40,-3 -c

Free(ptr[3])
returned 0
Free List [ Size 4 ]: [ addr:1000 sz:10 ][ addr:1010 sz:20 ][ addr:1030 sz:30 ][ addr:1060 sz:40 ]


==> In Descending Order all policies get fragmented BEST-FIT is a little bit better in therms of memory usage

./malloc.py -n 100 -H 0 -p WORST -P 1 -s 1  -A +40,-0,+30,-1,+20,-2,+10,-3 -c


WORST

Free(ptr[3])
returned 0
Free List [ Size 5 ]: [ addr:1000 sz:20 ][ addr:1020 sz:20 ][ addr:1040 sz:10 ][ addr:1050 sz:20 ][ addr:1070 sz:30 ]

BEST

Free(ptr[3])
returned 0
Free List [ Size 4 ]: [ addr:1000 sz:20 ][ addr:1020 sz:10 ][ addr:1030 sz:10 ][ addr:1040 sz:60 ]
