 #HW_28.txt
 
    04.12.2021
    Sebastian Kaeser, Daniel Rill
    BSYS    (AIN3)
    
    OSTEP CHAPTER 26     " Threads -Locks "
    
###############################################
    
1. Examine flag.s. This code “implements” locking with a single memory
flag. Can you understand the assembly?


we load our flag
test if its 0
if not we repeat, if it is we go further

load the counter 
increment the counter
save the counter

save 0 to flag

check if counter bx is 0 if it is we stop
else we repeat


###############################################

2. When you run with the defaults, does flag.s work? Use the -M and -R
flags to trace variables and registers (and turn on -c to see their values).
Can you predict what value will end up in flag?


After the register count have been saved/updated it inncrements 
thus 2 threads bot loop 1 time results in count value 2

the flag register is beeing set to 1 inside the critical section (like a lock)
and after we leave it set to 0 again (release lock)
resulting in a alternating behaviour.

###############################################

3. Change the value of the register %bx with the -a flag (e.g., -a bx=2,bx=2
if you are running just two threads). What does the code do? How does it
change your answer for the question above?

We repeat the code (loop 2 times)

count will be doubled = 4
flag is alternating , 
    1 inside the critical sections, 
    0 outside


###############################################

4. Set bx to a high value for each thread, and then use the -i flag to generate
different interrupt frequencies; what values lead to a bad outcomes? Which
lead to good outcomes?

now we have to watch out where the interrupt takes places,
the danger is that we save the register values in both threads (equally)

results could end up not as expected.


i = 5   -> counter sets 5
i = 4  -> counter sets to 8
i = 10 -> enough to save registers sets counter to 9

###############################################

5. Now let’s look at the program test-and-set.s. First, try to understand
the code, which uses the xchg instruction to build a simple locking primi-
tive. How is the lock acquire written? How about lock release?



xchg aquieres our lock 
gets into the critical section
and releases it again ( 0 ) 

resulting in safe behaviour ( no thread can overwrite our counter , instruction runs atomicly)

###############################################

6. Now run the code, changing the value of the interrupt interval (-i) again,
and making sure to loop for a number of times. Does the code always work
as expected? Does it sometimes lead to an inefficient use of the CPU? How
could you quantify that?


with high interrupts the cpu cylces are wasted in locked mode 
one thread has to complete the other cant do anything (spins)

###############################################

7. Use the -P flag to generate specific tests of the locking code. For example,
run a schedule that grabs the lock in the first thread, but then tries to acquire
it in the second. Does the right thing happen? What else should you test?


the thread with a higher priority gets done first, even with interrupts in between

if we try  eg
 00 1111111111111111
 
thread 1 will spin for a long while (waste cpu cycles)


###############################################

8. Now let’s look at the code in peterson.s, which implements Peterson’s
algorithm (mentioned in a sidebar in the text). Study the code and see if
you can make sense of it.

peterson.s assumes a hard coded number of threads staticly defined with the      flag[array]
calculates the turn of the current thread
and sort the correct case for a thread, to lock the thread


after thath we can savely go to the critical section

and of course release the lock again


    Pretty impresive for just 10 rows of code !

###############################################

9. Now run the code with different values of -i. What kinds of different be-
havior do you see? Make sure to set the thread IDs appropriately (using -a
bx=0,bx=1 for example) as the code assumes it.


the code runs correct, result is as expected



###############################################

10. Can you control the scheduling (with the -P flag) to “prove” that the code
works? What are the different cases you should show hold? Think about
mutual exclusion and deadlock avoidance.

if  we interrupt the code right after a turn gets moved (but not saved) and the next threads do the same
the counter result will not be correct 


###############################################

11. Now study the code for the ticket lock in ticket.s. Does it match the code
in the chapter? Then run with the following flags: -a bx=1000,bx=1000
(causing each thread to loop through the critical section 1000 times). Watch
what happens; do the threads spend much time spin-waiting for the lock?

the counter is correct,

but each threads spins alot.
with default setting (i=50)a process spins 12 times after it has updated once!

###############################################

12. How does the code behave as you add more threads?

    The Code wastes a lot of CPU Cycles 
    
    we counted the lines :
    
    2 threads,
    492 lines
    
    3 threads , bx = 10 for each
    
    962 lines
    
    4 threads,
    1333 lines

###############################################

13. Now examine yield.s, in which a yield instruction enables one thread
to yield control of the CPU (realistically, this would be an OS primitive, but
for the simplicity, we assume an instruction does the task). Find a scenario
where test-and-set.s wastes cycles spinning, but yield.s does not.
How many instructions are saved? In what scenarios do these savings arise?

test and test and set -> lines = 183
test and set -> lines  = 147
yield       -> lines = 152
paterson -> lines 59 !!
ticket      -> lines 158

with yield we get more cycles / instructions
5 instructions more --> the mutex instructions


###############################################

14. Finally, examine test-and-test-and-set.s. What does this lock do?
What kind of savings does it introduce as compared to test-and-set.s?

mov mutex, %ax
test %0, %ax
jne .acquire

3 more instructions, 


test and test and set, checks if lock is already acquired (mutex == 1 or Mutex == 0)

test and set just grabs the lock 


we avoid unnecessary registers stores (write)
